import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
  id 'org.springframework.boot' version '3.5.1'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'java'
  id 'org.hibernate.orm' version '7.0.0.Final'
  id 'org.graalvm.buildtools.native' version '0.10.6'
  id 'org.jetbrains.kotlin.jvm' version '2.1.21'
  id 'org.jetbrains.kotlin.plugin.spring' version '2.1.21'
  id 'org.jetbrains.kotlin.plugin.jpa' version '2.1.21'
  id 'org.jetbrains.kotlin.plugin.allopen' version '2.1.21'
  id 'com.ncorti.ktfmt.gradle' version '0.23.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '23'
  targetCompatibility = '23'
}

kotlin {
  jvmToolchain(23)
  compilerOptions {
    apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_0)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
  implementation 'org.jetbrains.kotlin:kotlin-reflect'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
  runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

allOpen {
  annotation("jakarta.persistence.Entity")
  annotation("jakarta.persistence.Embeddable")
  annotation("jakarta.persistence.MappedSuperclass")
}

tasks.withType(KotlinCompile).configureEach {
  compilerOptions {
    freeCompilerArgs.add("-Xjsr305=strict")
  }
}

tasks.named('test') {
  useJUnitPlatform()
}

hibernate {
  enhancement {
    enableAssociationManagement = true
  }
}

ktfmt {
    // // Dropbox style - 4 space indentation
    // dropboxStyle()
    
    // // Google style - 2 space indentation
    // googleStyle()
    
    // KotlinLang style - 4 space indentation - From kotlinlang.org/docs/coding-conventions.html
    kotlinLangStyle()

    // // Breaks lines longer than maxWidth. Default 100.
    // maxWidth.set(80)
    // // blockIndent is the indent size used when a new block is opened, in spaces.
    // blockIndent.set(8)
    // // continuationIndent is the indent size used when a line is broken because it's too
    // continuationIndent.set(8)
    // // Whether ktfmt should remove imports that are not used.
    // removeUnusedImports.set(false)
}
